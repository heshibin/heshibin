"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4218],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},g="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),g=s(t),p=a,m=g["".concat(l,".").concat(p)]||g[p]||h[p]||i;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[g]="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1435:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const i={title:"Integer\u6bd4\u8f83\u76f8\u7b49\u95ee\u9898",date:new Date("2023-01-12T00:00:00.000Z"),authors:"heshibin",tags:["java"]},o=void 0,c={permalink:"/blog/Integer\u6bd4\u8f83\u76f8\u7b49",editUrl:"https://github.com/heshibin/heshibin.github.io/edit/main/blog/blog/Integer\u6bd4\u8f83\u76f8\u7b49.md",source:"@site/blog/Integer\u6bd4\u8f83\u76f8\u7b49.md",title:"Integer\u6bd4\u8f83\u76f8\u7b49\u95ee\u9898",description:"Integer\u5728\u5224\u65ad\u76f8\u7b49\u65f6\uff0c\u5f53\u503c\u5b9a\u4e49\u5728-128~127\u4e4b\u95f4\u65f6\uff0c\u4f7f\u7528==\u6216\u8005equal()\u6bd4\u8f83\u662f\u4e00\u6837\u7684\u3002\u4f46\u5f53\u503c\u5b9a\u4e49\u5728\u8fd9\u4e2a\u8303\u56f4\u65f6\uff0cequal()\u6bd4\u8f83\u7684\u662f\u503c\uff0c==\u6bd4\u8f83\u7684\u662f\u5185\u5b58\u5730\u5740\u3002",date:"2023-01-12T00:00:00.000Z",formattedDate:"January 12, 2023",tags:[{label:"java",permalink:"/blog/tags/java"}],readingTime:2.24,hasTruncateMarker:!1,authors:[{name:"heshibin",title:"cv\u6478\u9c7c\u5927\u5e08",url:"https://github.com/heshibin",email:"17608484341@163.com",imageURL:"https://avatars.githubusercontent.com/u/49633468?s=400&u=e1850391be1aa0356c3ae4202a8e8b8018c584d0&v=4",key:"heshibin"}],frontMatter:{title:"Integer\u6bd4\u8f83\u76f8\u7b49\u95ee\u9898",date:"2023-01-12T00:00:00.000Z",authors:"heshibin",tags:["java"]},prevItem:{title:"\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898-KMP\u7b97\u6cd5",permalink:"/blog/\u5b57\u7b26\u4e32\u5339\u914d\u95ee\u9898-KMP\u7b97\u6cd5"},nextItem:{title:"GET\u548cPOST\u7684\u533a\u522b",permalink:"/blog/GET\u548cPOST\u7684\u533a\u522b"}},l={authorsImageUrls:[void 0]},s=[],u={toc:s};function g(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"    public static void main(String[] args) {\n        Integer a = 127;\n        Integer b = 127;\n        System.out.println(a == b); // true\n        System.out.println(a.equals(b)); // true\n\n        Integer c = 128;\n        Integer d = 128;\n        System.out.println(c == d); // false\n        System.out.println(c.equals(d)); // true\n    }\n")),(0,a.kt)("p",null,"Integer\u5728\u5224\u65ad\u76f8\u7b49\u65f6\uff0c\u5f53\u503c\u5b9a\u4e49\u5728-128~127\u4e4b\u95f4\u65f6\uff0c\u4f7f\u7528==\u6216\u8005equal()\u6bd4\u8f83\u662f\u4e00\u6837\u7684\u3002\u4f46\u5f53\u503c\u5b9a\u4e49\u5728\u8fd9\u4e2a\u8303\u56f4\u65f6\uff0cequal()\u6bd4\u8f83\u7684\u662f\u503c\uff0c==\u6bd4\u8f83\u7684\u662f\u5185\u5b58\u5730\u5740\u3002"),(0,a.kt)("p",null,"-128\u5230127\u7684\u8303\u56f4\u5185\uff0cInteger\u4e0d\u5bf9\u521b\u5efa\u5bf9\u8c61\uff0c\u800c\u662f\u76f4\u63a5\u53d6\u7cfb\u7edf\u7f13\u5b58\u4e2d\u7684\u53d8\u91cf\u6570\u636e\u3002"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'    /**\n     * Cache to support the object identity semantics of autoboxing for values between\n     * -128 and 127 (inclusive) as required by JLS.\n     *\n     * The cache is initialized on first usage.  The size of the cache\n     * may be controlled by the {@code -XX:AutoBoxCacheMax=<size>} option.\n     * During VM initialization, java.lang.Integer.IntegerCache.high property\n     * may be set and saved in the private system properties in the\n     * sun.misc.VM class.\n     */\n\n    private static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty("java.lang.Integer.IntegerCache.high");\n            if (integerCacheHighPropValue != null) {\n                try {\n                    int i = parseInt(integerCacheHighPropValue);\n                    i = Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high = h;\n\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high >= 127;\n        }\n\n        private IntegerCache() {}\n    }\n\n    /**\n     * Returns an {@code Integer} instance representing the specified\n     * {@code int} value.  If a new {@code Integer} instance is not\n     * required, this method should generally be used in preference to\n     * the constructor {@link #Integer(int)}, as this method is likely\n     * to yield significantly better space and time performance by\n     * caching frequently requested values.\n     *\n     * This method will always cache values in the range -128 to 127,\n     * inclusive, and may cache other values outside of this range.\n     *\n     * @param  i an {@code int} value.\n     * @return an {@code Integer} instance representing {@code i}.\n     * @since  1.5\n     */\n    public static Integer valueOf(int i) {\n        if (i >= IntegerCache.low && i <= IntegerCache.high)\n            return IntegerCache.cache[i + (-IntegerCache.low)];\n        return new Integer(i);\n    }\n')))}g.isMDXComponent=!0}}]);